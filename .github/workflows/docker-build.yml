# —Ñ–∞–π–ª docker-build.yml (—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã)
name: Build and Push Docker Images

on:
    push:
        tags:
            - 'hw-monitor-v*'
            - 'hw-monitor-licd-v*'
            - 'hw-monitor-nginx-combined-v*'
    workflow_dispatch:
        inputs:
            service:
                description: '–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–±–æ—Ä–∫–∏'
                required: true
                type: choice
                options:
                    - hw-monitor
                    - hw-monitor-licd
                    - hw-monitor-nginx-combined
            version:
                description: '–í–µ—Ä—Å–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.0.0-alpha.8)'
                required: true
                type: string

jobs:
    code-quality:
        # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ release workflow, –Ω–∞ PR, –∏–ª–∏ –≤—Ä—É—á–Ω—É—é
        if: >
            github.event_name == 'release' ||
            github.event_name == 'pull_request' ||
            (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
            github.event_name == 'workflow_dispatch'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  # –ü—Ä–∏ workflow_run –Ω—É–∂–Ω–æ —á–µ–∫–∞—É—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ç–∫—É
                  ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_branch || github.ref }}

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'
                  cache: 'yarn'

            - name: Install dependencies
              run: yarn install --frozen-lockfile

            - name: Check code formatting
              run: |
                  echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞..."
                  if ! yarn prettier --check .; then
                    echo "‚ùå –û–®–ò–ë–ö–ê: –ö–æ–¥ –Ω–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
                    echo "üìù –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ:"
                    echo "   yarn format"
                    echo "   git add ."
                    echo "   git commit -m 'fix: format code'"
                    echo "   git push"
                    exit 1
                  else
                    echo "‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                  fi

            - name: Type checking
              run: |
                  echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã TypeScript..."
                  yarn tsc --noEmit

            - name: Linting
              run: |
                  echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–æ–º..."
                  yarn lint

    build-and-push:
        runs-on: ubuntu-latest
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_branch || github.ref }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Login to DockerHub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Determine service, version and tags
              id: vars
              shell: bash
              run: |
                  if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                    SERVICE="${{ github.event.inputs.service }}"
                    VERSION="${{ github.event.inputs.version }}"
                    TAG="${SERVICE}-v${VERSION}"
                  else
                    TAG="${GITHUB_REF_NAME}" # –Ω–∞–ø—Ä–∏–º–µ—Ä: hw-monitor-v1.0.0-alpha
                    SERVICE="${TAG%%-v*}"    # hw-monitor | hw-monitor-licd | hw-monitor-nginx-combined
                    VERSION="${TAG#${SERVICE}-v}" # 1.0.0-alpha –∏–ª–∏ 1.0.0
                  fi

                  if [[ -z "$SERVICE" || -z "$VERSION" ]]; then
                    echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: service='$SERVICE' version='$VERSION'"
                    exit 1
                  fi

                  if [[ "$VERSION" == *"-alpha"* ]]; then
                    ALIAS_TAG="alpha"
                  else
                    ALIAS_TAG="latest"
                  fi

                  if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+-alpha$ ]]; then
                    git fetch --tags --force
                    BASE="${SERVICE}-v${VERSION}"
                    LAST=$(git tag -l "${BASE}.*" | sed -E 's/.*-alpha\.([0-9]+)$/\1/' | sort -n | tail -n1)
                    if [[ -z "$LAST" ]]; then
                      NEXT=1
                    else
                      NEXT=$((LAST+1))
                    fi
                    VERSION_TAG="${SERVICE}-v${VERSION}.${NEXT}"
                  else
                    VERSION_TAG="${TAG}"
                  fi

                  case "$SERVICE" in
                    hw-monitor)
                      IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/hw-monitor"
                      DOCKERFILE="./Dockerfile"
                      CONTEXT="."
                      ;;
                    hw-monitor-licd)
                      IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/hw-monitor-licd"
                      DOCKERFILE="./licd/Dockerfile"
                      CONTEXT="./licd"
                      ;;
                    hw-monitor-nginx-combined)
                      IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/hw-monitor-nginx-combined"
                      DOCKERFILE="./Dockerfile.nginx-combined"
                      CONTEXT="."
                      ;;
                    *)
                      echo "‚ùå Unsupported service: $SERVICE"
                      exit 1
                      ;;
                  esac

                  echo "SERVICE=$SERVICE" >> $GITHUB_OUTPUT
                  echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
                  echo "COMMIT=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
                  echo "DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
                  echo "ALIAS_TAG=$ALIAS_TAG" >> $GITHUB_OUTPUT
                  echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_OUTPUT
                  echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT
                  echo "DOCKERFILE=$DOCKERFILE" >> $GITHUB_OUTPUT
                  echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT

            - name: Build and push selected service
              uses: docker/build-push-action@v4
              with:
                  context: ${{ steps.vars.outputs.CONTEXT }}
                  file: ${{ steps.vars.outputs.DOCKERFILE }}
                  push: true
                  tags: |
                      ${{ steps.vars.outputs.IMAGE }}:${{ steps.vars.outputs.ALIAS_TAG }}
                      ${{ steps.vars.outputs.IMAGE }}:${{ steps.vars.outputs.VERSION_TAG }}
                  build-args: |
                      VERSION=${{ steps.vars.outputs.VERSION }}
                      COMMIT=${{ steps.vars.outputs.COMMIT }}
                      DATE=${{ steps.vars.outputs.DATE }}
                      ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}  # ‚Üê —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Build and push licd
              uses: docker/build-push-action@v4
              with:
                  context: ./licd
                  file: ./licd/Dockerfile
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: |
                      ${{ secrets.DOCKERHUB_USERNAME }}/hw-monitor-licd:${{ steps.tags.outputs.MAIN_TAG }}
                      ${{ secrets.DOCKERHUB_USERNAME }}/hw-monitor-licd:${{ steps.tags.outputs.VERSION_TAG }}
                  build-args: |
                      VERSION=${{ steps.vars.outputs.VERSION }}
                      COMMIT=${{ steps.vars.outputs.COMMIT }}
                      DATE=${{ steps.vars.outputs.DATE }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
