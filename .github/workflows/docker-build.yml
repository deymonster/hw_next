name: Build and Push Docker Images

on:
    push:
        branches: [main, master, feature/licensing-system]
        tags: ['v*']
    pull_request:
        branches: [main, master, feature/licensing-system]
    release:
        types: [published]
    workflow_run:
        workflows: ['Release']
        types: [completed]
    workflow_dispatch:

jobs:
    code-quality:
        runs-on: ubuntu-latest
        if: ${{ github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'
                  cache: 'yarn'

            - name: Install dependencies
              run: yarn install --frozen-lockfile

            - name: Check code formatting
              run: |
                  echo "🔍 Проверяем форматирование кода..."
                  if ! yarn prettier --check .; then
                    echo "❌ ОШИБКА: Код не отформатирован правильно!"
                    echo "📝 Для исправления выполните локально:"
                    echo "   yarn format"
                    echo "   git add ."
                    echo "   git commit -m 'fix: format code'"
                    echo "   git push"
                    exit 1
                  else
                    echo "✅ Форматирование кода корректно"
                  fi

            - name: Type checking
              run: |
                  echo "🔍 Проверяем типы TypeScript..."
                  yarn tsc --noEmit

            - name: Linting
              run: |
                  echo "🔍 Проверяем код линтером..."
                  yarn lint

    build-and-push:
        runs-on: ubuntu-latest
        needs: code-quality
        if: ${{ github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Login to DockerHub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Determine Docker tags
              id: tags
              shell: bash
              run: |
                  if [[ "${{ github.event_name }}" == "release" ]]; then
                    VERSION="${{ github.event.release.tag_name }}"
                    if [[ "$VERSION" == *"-alpha."* ]]; then
                      echo "MAIN_TAG=licensing-dev" >> $GITHUB_OUTPUT
                      echo "NGINX_TAG=licensing-dev" >> $GITHUB_OUTPUT
                    else
                      echo "MAIN_TAG=latest" >> $GITHUB_OUTPUT
                      echo "NGINX_TAG=latest" >> $GITHUB_OUTPUT
                    fi
                    echo "VERSION_TAG=$VERSION" >> $GITHUB_OUTPUT
                  elif [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
                    VERSION="${GITHUB_REF_NAME}"
                    if [[ "$VERSION" == *"-alpha."* ]]; then
                      echo "MAIN_TAG=licensing-dev" >> $GITHUB_OUTPUT
                      echo "NGINX_TAG=licensing-dev" >> $GITHUB_OUTPUT
                    else
                      echo "MAIN_TAG=latest" >> $GITHUB_OUTPUT
                      echo "NGINX_TAG=latest" >> $GITHUB_OUTPUT
                    fi
                    echo "VERSION_TAG=$VERSION" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
                    # Получаем последний тег релиза
                    git fetch --tags --force
                    VERSION="$(git describe --tags --abbrev=0 || true)"
                    if [[ -z "$VERSION" ]]; then
                      VERSION="v0.0.0-${GITHUB_SHA::7}"
                    fi
                    if [[ "$VERSION" == *"-alpha."* ]]; then
                      echo "MAIN_TAG=licensing-dev" >> $GITHUB_OUTPUT
                      echo "NGINX_TAG=licensing-dev" >> $GITHUB_OUTPUT
                    else
                      echo "MAIN_TAG=latest" >> $GITHUB_OUTPUT
                      echo "NGINX_TAG=latest" >> $GITHUB_OUTPUT
                    fi
                    echo "VERSION_TAG=$VERSION" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.ref }}" == "refs/heads/feature/licensing-system" ]]; then
                    echo "MAIN_TAG=licensing-dev" >> $GITHUB_OUTPUT
                    echo "NGINX_TAG=licensing-dev" >> $GITHUB_OUTPUT
                    echo "VERSION_TAG=licensing-v$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
                    echo "MAIN_TAG=latest" >> $GITHUB_OUTPUT
                    echo "NGINX_TAG=latest" >> $GITHUB_OUTPUT
                    echo "VERSION_TAG=v$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
                  else
                    echo "MAIN_TAG=${GITHUB_SHA}" >> $GITHUB_OUTPUT
                    echo "NGINX_TAG=${GITHUB_SHA}" >> $GITHUB_OUTPUT
                    echo "VERSION_TAG=${GITHUB_SHA}" >> $GITHUB_OUTPUT
                  fi

            - name: Set version vars
              id: vars
              shell: bash
              run: |
                  if [[ "${{ github.event_name }}" == "release" ]]; then
                    TAG="${{ github.event.release.tag_name }}"
                    echo "VERSION=${TAG#v}" >> $GITHUB_OUTPUT
                  elif [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
                    echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
                    git fetch --tags --force
                    TAG="$(git describe --tags --abbrev=0 || true)"
                    if [[ -z "$TAG" ]]; then
                      echo "VERSION=0.0.0-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
                    else
                      echo "VERSION=${TAG#v}" >> $GITHUB_OUTPUT
                    fi
                  else
                    echo "VERSION=0.0.0-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
                  fi
                  echo "COMMIT=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
                  echo "DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

            - name: Build and push NextJS app
              uses: docker/build-push-action@v4
              with:
                  context: .
                  file: ./Dockerfile
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: |
                      ${{ secrets.DOCKERHUB_USERNAME }}/hw-monitor:${{ steps.tags.outputs.MAIN_TAG }}
                      ${{ secrets.DOCKERHUB_USERNAME }}/hw-monitor:${{ steps.tags.outputs.VERSION_TAG }}
                  build-args: |
                      ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
                      ENABLE_OBFUSCATION=true
                      VERSION=${{ steps.vars.outputs.VERSION }}
                      COMMIT=${{ steps.vars.outputs.COMMIT }}
                      DATE=${{ steps.vars.outputs.DATE }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Build and push Nginx combined
              uses: docker/build-push-action@v4
              with:
                  context: .
                  file: ./Dockerfile.nginx-combined
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: |
                      ${{ secrets.DOCKERHUB_USERNAME }}/hw-monitor-nginx-combined:${{ steps.tags.outputs.NGINX_TAG }}
                      ${{ secrets.DOCKERHUB_USERNAME }}/hw-monitor-nginx-combined:${{ steps.tags.outputs.VERSION_TAG }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Build and push licd
              uses: docker/build-push-action@v4
              with:
                  context: ./licd
                  file: ./licd/Dockerfile
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: |
                      ${{ secrets.DOCKERHUB_USERNAME }}/hw-monitor-licd:${{ steps.tags.outputs.MAIN_TAG }}
                      ${{ secrets.DOCKERHUB_USERNAME }}/hw-monitor-licd:${{ steps.tags.outputs.VERSION_TAG }}
                  build-args: |
                      VERSION=${{ steps.vars.outputs.VERSION }}
                      COMMIT=${{ steps.vars.outputs.COMMIT }}
                      DATE=${{ steps.vars.outputs.DATE }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
