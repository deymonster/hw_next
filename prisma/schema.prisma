generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique
  name                 String?
  password             String
  role                 Role                  @default(USER)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  emailVerified        Boolean               @default(false)
  verificationToken    String?               @unique
  resetToken           String?               @unique
  resetTokenExpires    DateTime?
  image                String?
  events               Event[]
  notificationSettings NotificationSettings?
  smtpSettings         SmtpSettings?
  telegramSettings     TelegramSettings?
}

model Event {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  type      EventType
  severity  EventSeverity @default(LOW)
  title     String
  message   String
  isRead    Boolean       @default(false)
  userId    String
  user      User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model NotificationSettings {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  siteNotification     Boolean  @default(true)
  telegramNotification Boolean  @default(false)
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TelegramSettings {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  botToken          String
  telegramChatId    String?
  isActive          Boolean   @default(false)
  lastInteractionAt DateTime?
  username          String?
  firstName         String?
  userId            String    @unique
  botUsername       String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SmtpSettings {
  id         String       @id @default(uuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  host       String
  port       Int
  secure     Boolean      @default(false)
  username   String
  password   String
  fromEmail  String
  fromName   String?
  provider   SmtpProvider @default(CUSTOM)
  isVerified Boolean      @default(false)
  lastTestAt DateTime?
  userId     String       @unique
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Device {
  id             String       @id @default(uuid())
  name           String
  ipAddress      String   
  agentKey       String      @unique
  serialNumber   String?
  warrantyStatus DateTime?
  lastUpdate     DateTime     @updatedAt
  status         DeviceStatus @default(ACTIVE)
  type           DeviceType   @default(WINDOWS)
  departmentId   String?
  employeeId     String?
  deviceTag      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  lastSeen       DateTime? 
  department     Department?    @relation("DepartmentDevices", fields: [departmentId], references: [id])
  employee       Employee?    @relation(fields: [employeeId], references: [id]) 

  @@index([status])
  @@index([agentKey])
  @@index([type])
  @@index([employeeId])
}


model Employee {
  id              String @id @default(uuid())
  firstName       String
  lastName        String
  email           String?
  phone           String?
  position        String?
  departmentId    String?
  department      Department? @relation(fields: [departmentId], references: [id]) 
  devices         Device[]

  @@index([departmentId]) 
}

model Department {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  devices     Device[] @relation("DepartmentDevices")
  employees   Employee[]
}

enum Role {
  USER
  ADMIN
}

enum EventType {
  SYSTEM
  USER
  DEVICE
  ALERT
  INFO
}

enum EventSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SmtpProvider {
  GMAIL
  YANDEX
  MAIL
  CUSTOM
}

enum DeviceStatus {
  ACTIVE
  INACTIVE
  PENDING
  DECOMMISSIONED
}

enum DeviceType {
  WINDOWS
  LINUX
}
