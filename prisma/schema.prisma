// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                String   @id @default(uuid()) // Уникальный идентификатор
  email             String   @unique
  name              String?
  image             String?  // URL аватара пользователя
  password          String           // Хранение хэша пароля
  role              Role     @default(USER) // Роль пользователя
  emailVerified     Boolean  @default(false) // Статус подтверждения email
  verificationToken String?  @unique // Токен для подтверждения email
  resetToken        String?   @unique // Токен для сброса пароля
  resetTokenExpires DateTime? // Время истечения токена
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  events                Event[] // Связь с событиями
  notificationSettings  NotificationSettings?
  smtpSettings          SmtpSettings?  
  telegramSettings      TelegramSettings?           

}

enum Role {
  USER
  ADMIN
}


enum EventType {
  SYSTEM        // Системные уведомления (обновления, maintenance и т.д.)
  USER          // Уведомления связанные с пользователем (смена пароля, email и т.д.)
  DEVICE        // Уведомления от устройств
  ALERT         // Тревожные уведомления (критические показатели устройств)
  INFO          // Информационные уведомления
}

// Уровни важности уведомлений
enum EventSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Event {
  id        String   @id @default(uuid()) // Уникальный идентификатор
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type      EventType
  severity  EventSeverity @default(LOW)
  title     String
  message   String
  isRead    Boolean @default(false)

  user      User @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model NotificationSettings {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  emailNotification     Boolean @default(true)
  siteNotification      Boolean @default(true)
  telegramNotification  Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@index([userId])
}

model TelegramSettings {
  id          String @id  @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  botToken             String
  telegramChatId       String?
  isActive             Boolean @default(false) // Активирован ли бот
  lastInteractionAt    DateTime? // Последнее взаимодействие с ботом

  username             String?
  firstName            String?

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @unique

  @@index([userId])

}

model SmtpSettings {
  id          String @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  host        String
  port        Int 
  secure      Boolean @default(false)
  username    String
  password    String
  fromEmail   String
  fromName    String?

  provider    SmtpProvider @default(CUSTOM)
  isVerified  Boolean      @default(false)
  lastTestAt  DateTime?

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @unique

  @@index([userId])


}

enum SmtpProvider {
  GMAIL
  YANDEX
  MAIL
  CUSTOM
}




model Device {
  id              String    @id @default(uuid()) // Уникальный идентификатор
  uniqueId        String?   @unique // UUID от экспортера
  serialNumber    String?     // Серийный номер устройства
  warrantyStatus  DateTime?   // Дата окончания гарантии
  lastUpdate      DateTime    @updatedAt // Время последнего обновления
  status          DeviceStatus @default(ACTIVE) // Статус устройства
  type            DeviceType  @default(WINDOWS) // Тип устройства (Windows, Linux)
  locationId      String?     // Идентификатор местоположения
  location        Location?   @relation("LocationDevices", fields: [locationId], references: [id], onDelete: SetNull)
  deviceTag       String?     //  Тег устройства для идентификации
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([status])
  @@index([uniqueId])
  @@index([type])

}

enum DeviceStatus {
  ACTIVE         // Устройство активно и мониторится
  INACTIVE       // Устройство временно неактивно
  PENDING        // Устройство ожидает подтверждения
  DECOMMISSIONED // Устройство снято с эксплуатации
}

enum DeviceType {
  WINDOWS
  LINUX
}

model Location {
  id          String    @id @default(uuid()) // Уникальный идентификатор
  name        String    // Название местоположения
  description String?  // Описание местоположения
  devices     Device[]  @relation("LocationDevices")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}