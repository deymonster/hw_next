generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique
  name                 String?
  password             String
  role                 Role                  @default(USER)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  emailVerified        Boolean               @default(false)
  verificationToken    String?               @unique
  resetToken           String?               @unique
  resetTokenExpires    DateTime?
  image                String?
  events               Event[]
  notificationSettings NotificationSettings?
  smtpSettings         SmtpSettings?
  telegramSettings     TelegramSettings?
  inventories          Inventory[]
  alertRules           AlertRule[]
}

model Event {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  type      EventType
  severity  EventSeverity @default(LOW)
  title     String
  message   String
  isRead    Boolean       @default(false)
  userId    String
  user      User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model NotificationSettings {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  siteNotification     Boolean  @default(true)
  telegramNotification Boolean  @default(false)
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TelegramSettings {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  botToken          String
  telegramChatId    String?
  isActive          Boolean   @default(false)
  lastInteractionAt DateTime?
  username          String?
  firstName         String?
  userId            String    @unique
  botUsername       String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SmtpSettings {
  id         String       @id @default(uuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  host       String
  port       Int
  secure     Boolean      @default(false)
  username   String
  password   String
  fromEmail  String
  fromName   String?
  provider   SmtpProvider @default(CUSTOM)
  isVerified Boolean      @default(false)
  lastTestAt DateTime?
  userId     String       @unique
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Device {
  id             String       @id @default(uuid())
  name           String
  ipAddress      String   
  agentKey       String      @unique
  serialNumber   String?
  warrantyStatus DateTime?
  lastUpdate     DateTime     @updatedAt
  status         DeviceStatus @default(ACTIVE)
  type           DeviceType   @default(WINDOWS)
  departmentId   String?
  employeeId     String?
  deviceTag      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  lastSeen       DateTime? 
  department     Department?    @relation("DepartmentDevices", fields: [departmentId], references: [id])
  employee       Employee?    @relation(fields: [employeeId], references: [id]) 
  inventoryItems InventoryItem[]

  @@index([status])
  @@index([agentKey])
  @@index([type])
  @@index([employeeId])
}


model Employee {
  id              String @id @default(uuid())
  firstName       String
  lastName        String
  email           String?
  phone           String?
  position        String?
  departmentId    String?
  department      Department? @relation(fields: [departmentId], references: [id]) 
  devices         Device[]
  inventoryItems  InventoryItem[]

  @@index([departmentId]) 
}

model Department {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  devices     Device[] @relation("DepartmentDevices")
  employees   Employee[]
  inventoryItems InventoryItem[]
  inventories Inventory[]
}

model Inventory {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  startDate    DateTime  @default(now())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  items        InventoryItem[]
  departments  Department[] 

  @@index([userId])
  @@index([startDate])

}

model InventoryItem {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deviceId     String
  device       Device   @relation(fields: [deviceId], references: [id])
  inventoryId  String
  inventory    Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  // Данные об устройстве (если устройство доступно)
  processor     String?
  motherboard   Json?
  memory        Json? // массив планок памяти [{name: "Hynix", size: "8Gb"}]
  storage       Json? // массив накопителей
  networkCards  Json? // массив сетевых карт
  videoCards    Json? // массив видеокарт

  // Метрики
  diskUsage     Json? // массив использования дисков %

  // Информация о принадлежности
  employeeId   String?   
  employee     Employee? @relation(fields: [employeeId], references: [id])
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  @@index([deviceId])
  @@index([inventoryId])
  @@index([employeeId])
  @@index([departmentId])

}

enum Role {
  USER
  ADMIN
}

enum EventType {
  SYSTEM
  USER
  DEVICE
  ALERT
  INFO
}

enum EventSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SmtpProvider {
  GMAIL
  YANDEX
  MAIL
  CUSTOM
}

enum DeviceStatus {
  ACTIVE
  INACTIVE
  PENDING
  DECOMMISSIONED
}

enum DeviceType {
  WINDOWS
  LINUX
}


// Добавить в конец файла после существующих enum'ов

enum AlertCategory {
  HARDWARE_CHANGE
  CPU_MONITORING
  DISK_MONITORING
  NETWORK_MONITORING
}

enum AlertSeverity {
  INFO
  WARNING
  CRITICAL
}

enum ComparisonOperator {
  GREATER_THAN
  LESS_THAN
  GREATER_EQUAL
  LESS_EQUAL
  EQUAL
  NOT_EQUAL
}

model AlertRule {
  id          String            @id @default(uuid())
  name        String
  category    AlertCategory
  metric      String
  expression  String
  threshold   Float?
  operator    ComparisonOperator?
  duration    String            // например: '5m', '30s'
  severity    AlertSeverity
  description String
  labels      Json?             // дополнительные лейблы как JSON
  enabled     Boolean           @default(true)
  changeType  ChangeType? 
  includeInstance Boolean       @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      String            // связь с пользователем, который создал правило
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([severity])
  @@index([enabled])
  @@index([userId])
  @@index([metric])
}

enum ChangeType {
  LABEL_CHANGE    
  VALUE_CHANGE    
  THRESHOLD       
}


