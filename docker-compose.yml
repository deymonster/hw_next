services:
    postgres:
        image: postgres:13
        container_name: postgres_container
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        ports:
            - '${POSTGRES_PORT}:5432'
        volumes:
            - pg_data:/var/lib/postgresql/data
        networks:
            - hw-network
        env_file:
            - .env

    # nextjs:
    #   build:
    #     context: .
    #     dockerfile: Dockerfile
    #   container_name: nextjs_app
    #   ports:
    #     - "3000:3000"
    #   depends_on:
    #     - postgres
    #     - redis
    #   env_file:
    #     - .env.prod
    #   networks:
    #     - hw-network
    #   restart: unless-stopped

    prometheus:
        image: prom/prometheus:v2.36.0
        container_name: prometheus_container
        ports:
            - '${PROMETHEUS_PORT}:9090'
        expose:
            - 9090
        networks:
            - hw-network
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
            - ./prometheus/alerts:/etc/prometheus/alerts:ro
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'
            - '--web.enable-lifecycle'
        env_file:
            - .env
        depends_on:
            - licd

    alertmanager:
        image: prom/alertmanager:v0.26.0
        container_name: alertmanager_container
        ports:
            - '9093:9093'
        volumes:
            - ./prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml
        command:
            - '--config.file=/etc/alertmanager/alertmanager.yml'
            - '--storage.path=/alertmanager'
        networks:
            - hw-network
        depends_on:
            - nextjs

    nginx-proxy:
        build:
            context: .
            dockerfile: Dockerfile.nginx-combined
        container_name: nginx_prometheus_proxy
        ports:
            - '8080:8080'

        volumes:
            - ./nginx/auth/.htpasswd:/etc/nginx/auth/.htpasswd
            - ./nginx/conf.d/upstream.conf:/etc/nginx/conf.d/upstream.conf
        networks:
            - hw-network

    nginx-storage:
        image: nginx:alpine
        container_name: nginx_storage
        ports:
            - '8081:80'
        volumes:
            - ./storage/uploads:/usr/share/nginx/html/uploads
            - ./nginx_storage/storage.conf:/etc/nginx/conf.d/default.conf
        networks:
            - hw-network
        restart: unless-stopped

    redis:
        image: redis:alpine
        container_name: redis_container
        env_file:
            - .env
        command: redis-server --requirepass ${REDIS_PASSWORD}
        ports:
            - '6379:6379'
        volumes:
            - redis_data:/data
        networks:
            - hw-network

    licd:
        build:
            context: ./licd
            dockerfile: Dockerfile
        container_name: licd
        environment:
            - MAX_AGENTS=50
            - JOB_NAME=windows-agents
            - DB_PATH=/data/licd.db
        ports:
            - '8082:8081'
        expose:
            - '8081'
        networks:
            - hw-network
        restart: unless-stopped

volumes:
    pg_data:
    redis_data:
    prom-data:
    prom-configs:
    uploads:
        driver: local

networks:
    hw-network:
