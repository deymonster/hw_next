#!/usr/bin/env bash
set -euo pipefail

# =========================
# HW Monitor Installer (Ubuntu/Debian)
# =========================

# Defaults
SERVER_IP=""
ADMIN_EMAIL="admin@example.com"
TELEGRAM_BOT_TOKEN=""

# Parse args
while [[ $# -gt 0 ]]; do
  case "$1" in
    --server-ip)
      SERVER_IP="$2"
      shift 2
      ;;
    --admin-email)
      ADMIN_EMAIL="$2"
      shift 2
      ;;
    --telegram-bot-token)
      TELEGRAM_BOT_TOKEN="$2"
      shift 2
      ;;
    *)
      echo "Unknown option: $1"; exit 1
      ;;
  esac
done

# Detect server IP if not provided
detect_ip() {
  if [[ -n "${SERVER_IP}" ]]; then
    echo "${SERVER_IP}"
    return
  fi
  if command -v hostname >/dev/null 2>&1; then
    local ip
    ip=$(hostname -I 2>/dev/null | awk '{print $1}')
    if [[ -n "${ip}" ]]; then
      echo "${ip}"; return
    fi
  fi
  if command -v curl >/dev/null 2>&1; then
    local ip
    ip=$(curl -s http://ifconfig.me || true)
    if [[ -n "${ip}" ]]; then
      echo "${ip}"; return
    fi
  fi
  echo "127.0.0.1"
}

SERVER_IP="$(detect_ip)"
echo "Using SERVER_IP=${SERVER_IP}"

# Random generators
random_b64() {
  if command -v openssl >/dev/null 2>&1; then
    openssl rand -base64 32
  else
    head -c 32 /dev/urandom | base64
  fi
}

# Ensure apt and basic tools
ensure_prereqs() {
  if ! command -v apt-get >/dev/null 2>&1; then
    echo "apt-get not found. This script targets Ubuntu/Debian."; exit 1
  fi
  sudo apt-get update -y
  sudo apt-get install -y ca-certificates curl gnupg
}

install_docker() {
  if command -v docker >/dev/null 2>&1; then
    echo "Docker found."
  else
    echo "Installing Docker..."
    sudo apt-get install -y docker.io
  fi
}

install_compose() {
  if command -v docker-compose >/dev/null 2>&1; then
    echo "Docker Compose found."
  else
    echo "Installing Docker Compose..."
    sudo apt-get install -y docker-compose
  fi
}

# Create required directories
prepare_dirs() {
  mkdir -p storage/logs storage/uploads
  chmod -R 755 storage/logs storage/uploads
}

# Generate .env.prod if not exists
generate_env() {
  if [[ -f ".env.prod" ]]; then
    echo ".env.prod already exists, skipping generation."
    return
  fi

  echo "Generating .env.prod..."
  DB_PASSWORD="$(random_b64)"
  REDIS_PASSWORD="$(random_b64)"
  NEXTAUTH_SECRET="$(random_b64)"
  ENCRYPTION_KEY="$(random_b64)"
  PROM_PASSWORD="$(random_b64 | sed 's/[^a-zA-Z0-9]/_/g')"
  HANDSHAKE_KEY="$(random_b64)"

  cat > .env.prod <<EOF
# Base URLs
NEXTAUTH_URL=https://${SERVER_IP}
NEXT_PUBLIC_URL=https://${SERVER_IP}

# Admin
ADMIN_EMAIL=${ADMIN_EMAIL}

# Redis
REDIS_URL=redis://redis:6379
REDIS_PASSWORD=

# Prometheus
PROMETHEUS_PROXY_URL=http://nginx-proxy:8080
PROMETHEUS_AUTH_PASSWORD=${PROM_PASSWORD}

# Storage
NEXT_PUBLIC_STORAGE_URL=http://nginx-storage:8082
NEXT_PUBLIC_UPLOADS_BASE_URL=http://nginx-storage:8082/uploads

# SMTP (optional) - fill later if needed
SMTP_HOST=
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=
SMTP_PASSWORD=
SMTP_FROM_EMAIL=
SMTP_FROM_NAME="NITRINOnet Monitoring System"

# Licensing (optional)
LICD_URL=http://licd:8085
LICENSING_ENABLED=false
LICENSE_CHECK_INTERVAL=3600
EOF

  echo ".env.prod generated."
  echo "Admin account:"
  echo "  ADMIN_EMAIL=${ADMIN_EMAIL}"
  echo "Note: No admin password is generated by this installer."
  echo "DB password and other secrets are generated; check .env.prod if needed."
}

compose_up() {
  echo "Pulling images and starting services..."
  sudo docker-compose -f docker-compose.prod.yml pull || true
  sudo docker-compose -f docker-compose.prod.yml up -d
}

main() {
  ensure_prereqs
  install_docker
  install_compose
  prepare_dirs
  generate_env
  compose_up

  echo "Done."
  echo "Services should be accessible at:"
  echo "  Next.js:    http://${SERVER_IP}:3000"
  echo "  Nginx:      http://${SERVER_IP}:80"
  echo "  Prometheus: http://${SERVER_IP}:8080"
  echo "Check logs with: sudo docker-compose -f docker-compose.prod.yml logs -f"
  echo "------------------------------------------------------------"
  echo "Installed with:"
  echo "  SERVER_IP=${SERVER_IP}"
  echo "  NEXTAUTH_URL=https://${SERVER_IP}"
  echo "  NEXT_PUBLIC_URL=https://${SERVER_IP}"
  echo "  ADMIN_EMAIL=${ADMIN_EMAIL}"
  echo "  PROMETHEUS_PROXY_URL=http://nginx-proxy:8080"
  echo "  NEXT_PUBLIC_STORAGE_URL=http://nginx-storage:8082"
  echo "------------------------------------------------------------"
  echo "SMTP is not configured yet."
  echo "Please set SMTP_* in .env.prod and restart services."
  echo "Without SMTP, registration and email notifications will not work."
  echo "Steps:"
  echo "  1) Edit .env.prod: set SMTP_HOST, SMTP_PORT, SMTP_SECURE, SMTP_USER,"
  echo "     SMTP_PASSWORD, SMTP_FROM_EMAIL, SMTP_FROM_NAME"
  echo "  2) Restart: docker compose -f docker-compose.prod.yml down && \\" 
  echo "              docker compose -f docker-compose.prod.yml up -d"
}

main "$@"